{"version":3,"sources":["Bars.jsx","App.js","serviceWorker.js","index.js"],"names":["Bars","className","React","Component","DEBUG","debug","args","console","log","Dashboard","state","time","Date","toLocaleTimeString","updatedTime","this","setInterval","setState","onClick","props","logout","Homepage","login","e","preventDefault","username","target","value","password","fetch","headers","Accept","body","JSON","stringify","method","then","res","json","storeLoginInfo","reset","onSubmit","type","name","action","disabled","App","loggedIn","token","Page","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAsBeA,G,6LAjBX,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,yB,GAbJC,IAAMC,YCEnBC,GAAQ,EACd,SAASC,IAAe,IAAC,IAAD,qBAANC,EAAM,yBAANA,EAAM,gBAClBF,IAAO,EAAAG,SAAQC,IAAR,SAAY,UAAZ,OAAyBF,I,IAGhCG,E,2MACJC,MAAQ,CACNC,MAAM,IAAIC,MAAOC,sB,mFAGE,IAAD,OACdC,EAAcC,KAAKL,MAAMC,KAC7BK,aAAY,WACVF,GAAc,IAAIF,MAAOC,qBACzB,EAAKI,SAAS,CAAEN,KAAMG,MACrB,O,+BAIH,OACE,6BACE,2CAAiBC,KAAKL,MAAMC,MAC5B,2DACA,kBAAC,EAAD,MACA,4BAAQO,QAASH,KAAKI,MAAMC,QAA5B,e,GAnBgBlB,IAAMC,WAyBxBkB,E,2MAEJC,MAAQ,SAACC,GAEPA,EAAEC,iBAEF,IAAIC,EAAWF,EAAEG,OAAOD,SAASE,MAC7BC,EAAWL,EAAEG,OAAOE,SAASD,MAG7BF,GAAYG,GACdvB,EAAM,YAAaoB,EAAU,YAAaG,GAC1CvB,EAAM,yCAQNwB,MAAM,aAAc,CAClBC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAET,WAAUG,aACjCO,OAAQ,SAEPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAAShC,EAAMgC,MAIP,SAAZZ,GAAmC,SAAZG,GACzBvB,EAAM,oBAEN,EAAKc,MAAMoB,eAAed,EAAU,gBAEpCpB,EAAM,qCAENkB,EAAEG,OAAOc,UAKXnC,EAAM,wB,wEAKR,OACE,6BACE,8CACA,yBAAKJ,UAAU,kBACb,yBAAKA,UAAU,SACb,qCACA,0BAAMwC,SAAU1B,KAAKO,OACnB,2BAAOoB,KAAK,OAAOC,KAAK,aACxB,2BAAOD,KAAK,WAAWC,KAAK,aAC5B,2CAGJ,yBAAK1C,UAAU,YACb,wCACA,0BAAM2C,OAAO,IACX,2BAAOF,KAAK,OAAOC,KAAK,WAAWE,UAAQ,IAC3C,2BAAOH,KAAK,WAAWC,KAAK,WAAWE,UAAQ,IAC/C,2BAAOH,KAAK,WAAWC,KAAK,iBAAiBE,UAAQ,IACrD,4BAAQA,UAAQ,GAAhB,oB,GApES3C,IAAMC,WAgHd2C,E,2MAlCbpC,MAAQ,CACNqC,UAAU,EACVtB,SAAU,GACVuB,MAAO,I,EAITT,eAAiB,SAACd,EAAUuB,GAC1B3C,EAAM,gBACN,EAAKY,SAAS,CACZ8B,UAAU,EACVtB,WACAuB,W,EAIJ5B,OAAS,WACP,EAAKH,SAAS,CACZ8B,UAAU,EACVtB,SAAU,KACVuB,MAAO,Q,wEAKT,IAAMC,EAAOlC,KAAKL,MAAMqC,SACtB,kBAAC,EAAD,CAAW3B,OAAQL,KAAKK,SAExB,kBAAC,EAAD,CAAUmB,eAAgBxB,KAAKwB,iBAEjC,OAAO,yBAAKW,GAAG,OAAOD,O,GA/BR/C,IAAMC,WCpGJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.7e1bba69.chunk.js","sourcesContent":["import React from 'react';\r\nimport './dash-bar.css';\r\n\r\nclass Bars extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"igFrameBar\">\r\n        <div className=\"igData igData1\"></div>\r\n        <div className=\"igData igData2\"></div>\r\n        <div className=\"igData igData3\"></div>\r\n        <div className=\"igData igData4\"></div>\r\n        <div className=\"igData igData5\"></div>\r\n        <div className=\"igData igData6\"></div>\r\n        <div className=\"igData igData7\"></div>\r\n        <div className=\"igData igData8\"></div>\r\n        <div className=\"igData igData9\"></div>\r\n        <div className=\"igData igData10\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bars;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Bars from './Bars';\r\n\r\n// Degug mode:\r\nconst DEBUG = true;\r\nfunction debug(...args) {\r\n  if (DEBUG) console.log('DEBUG:', ...args);\r\n}\r\n\r\nclass Dashboard extends React.Component {\r\n  state = {\r\n    time: new Date().toLocaleTimeString()\r\n  };\r\n\r\n  componentDidMount() {\r\n    let updatedTime = this.state.time;\r\n    setInterval(() => {\r\n      updatedTime = new Date().toLocaleTimeString();\r\n      this.setState({ time: updatedTime });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Dashboard - {this.state.time}</h1>\r\n        <p>Some fancy stuff goes here..</p>\r\n        <Bars />\r\n        <button onClick={this.props.logout}>Logout</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Homepage extends React.Component {\r\n  // Login function to log the user in\r\n  login = (e) => {\r\n    // Prevent the form from reloading the page\r\n    e.preventDefault();\r\n    // Get the username and password from the form\r\n    let username = e.target.username.value;\r\n    let password = e.target.password.value;\r\n\r\n    // Do nothing if user left the fields blank\r\n    if (username && password) {\r\n      debug('username:', username, 'password:', password);\r\n      debug(\"Looks good, let's process the login..\");\r\n      /* Send the username and password to the backend\r\n       * to check if the user exists\r\n       * If the username and password combination is correct\r\n       * issue a new login token from the server and\r\n       * Log the user in by setting up the state: */\r\n\r\n      // Real login, sending data to the backend api\r\n      fetch('/api/login', {\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n        method: 'POST'\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => debug(res));\r\n\r\n      // ------------------------------------\r\n      // Pseudo login option:\r\n      if (username == 'admin' && password == 'admin') {\r\n        debug('Logging you in..');\r\n        // -------------------------------------\r\n        this.props.storeLoginInfo(username, 'dummytoken');\r\n      } else {\r\n        debug('Username and or password incorect');\r\n        // Reset the form and display some kind of warning\r\n        e.target.reset();\r\n      }\r\n    } else {\r\n      // Fields are missing\r\n      // Do something about it, like display an error message or something.\r\n      debug('Fields are missing.');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Login/Register</h1>\r\n        <div className=\"login-reg-area\">\r\n          <div className=\"login\">\r\n            <h3>Login</h3>\r\n            <form onSubmit={this.login}>\r\n              <input type=\"text\" name=\"username\" />\r\n              <input type=\"password\" name=\"password\" />\r\n              <button>Login</button>\r\n            </form>\r\n          </div>\r\n          <div className=\"register\">\r\n            <h3>Register</h3>\r\n            <form action=\"\">\r\n              <input type=\"text\" name=\"username\" disabled />\r\n              <input type=\"password\" name=\"password\" disabled />\r\n              <input type=\"password\" name=\"password-again\" disabled />\r\n              <button disabled>Register</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    loggedIn: false,\r\n    username: '',\r\n    token: ''\r\n  };\r\n\r\n  // Stores the login info by setting the credentials on the app state\r\n  storeLoginInfo = (username, token) => {\r\n    debug(\"It's working\");\r\n    this.setState({\r\n      loggedIn: true,\r\n      username,\r\n      token\r\n    });\r\n  };\r\n\r\n  logout = () => {\r\n    this.setState({\r\n      loggedIn: false,\r\n      username: null,\r\n      token: null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const Page = this.state.loggedIn ? (\r\n      <Dashboard logout={this.logout} />\r\n    ) : (\r\n      <Homepage storeLoginInfo={this.storeLoginInfo} />\r\n    );\r\n    return <div id=\"app\">{Page}</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}